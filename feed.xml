<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mleek's blog</title>
    <description>Mleek's blog_ study note &amp; daily life
</description>
    <link>http://lee95292.github.io/</link>
    <atom:link href="http://lee95292.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 15 Mar 2020 21:56:30 +0900</pubDate>
    <lastBuildDate>Sun, 15 Mar 2020 21:56:30 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>자바스크립트를 공부하려하는 당신에게</title>
        <description>&lt;p&gt;저는 학교에서 Python, C/C++, Java를 다루는 수업을 수강하고, 문법을 익혔고,&lt;br /&gt;
Java와 C로는 여러 토이프로젝트를 해보면서 나름 프로그래밍 언어를 배우고 사용하는데 익숙해져 있어서 내심 프로그래밍 언어는 거기서 거기지~ 라는 생각을 해왔습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트를 배우면서 그 오만한 생각은 와장창 깨져버렸습니다…&lt;/p&gt;

&lt;p&gt;이 글에서는 제가 자바스크립트를 공부하며, 사용하며 어떤게 어려웠는지,&lt;br /&gt;
그럼에도 계속 자바스크립트를 공부하는 이유, 제가 생각하는 자바스크립트의 매력을 소개해보려 합니다!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reactjs&quot;&gt;사용한 라이브러리 :React.js&lt;/h2&gt;

&lt;p&gt;제일 처음으로 저는 웹 프론트 페이지를 만들기 위해 Reactjs 라이브러리를 공부했습니다.&lt;br /&gt;
이전까지 HTML/CSS/JQuery로 페이지를 구성했는데, 이때는 HTML문서에 Javascript를 끼워넣는 느낌이어서 코딩을 한다는 느낌이 들지는 않았고, 제대로된 페이지를 만들어 본 경험은 없었습니다.&lt;/p&gt;

&lt;p&gt;조금 더 제대로된 다이나믹한 웹 페이지를 만들기 위해 Jquery를 더 공부할까 고민했습니다.&lt;br /&gt;
그러던 도중 주변에서 React가 정말 쉽고 간편하다는 이야기를 듣고 React를 시작하게 되었습니다.&lt;/p&gt;

&lt;p&gt;결론부터 말씀드리자면,&lt;strong&gt;React는 간편하지만 절대 쉽지는 않습니다&lt;/strong&gt;.&lt;br /&gt;
위에서 말씀드렸듯, 저는 프로그래밍 언어 학습을 몇차례 학습하면서, 각 언어들이 가지는 공통점과 차이점을 비교하면서 학습하는 것에 익숙해져 있었는데요, React에서 다루는 중점적인 개념은 여타 프로그래밍 언어와 상당히 차이가 있었습니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/jslib-intro/react-lifecycle.png&quot; /&gt;
&lt;span style=&quot;text-align:center&quot;&gt;그림: React 컴포넌트의 생명주기&lt;/span&gt; 
대표적인 예시로,&lt;strong&gt;state와 property를 다루는 일, 컴포넌트의 생명주기, 모듈화, 컴포넌트, 훅&lt;/strong&gt; 등이 그것입니다.&lt;/p&gt;

&lt;p&gt;React에서는 컴포넌트의 렌더링이 Property와 State라고 불리는 리액트 컴포넌트의 특수 변수의 변경에 따라 일어나는데, 이런 개념을 멀리서 보면 객체지향의 상속과 비슷하네~ 생각할 수도 있지만 전혀 다른 개념이며, 이와 비슷하게 리액트가 사용하는 생소한 개념에 익숙해지는 것에 생각보다 시간이 많이 걸렸습니다…&lt;/p&gt;

&lt;p&gt;이렇듯, “쉽다”는것이 (최소한 저에게) 리액트의 장점이 아닙니다.&lt;br /&gt;
그럼에도 불구하고, 저는 이제 페이지를 구현할 때 React만을 사용합니다.&lt;br /&gt;
리액트는 컴포넌트를 재사용하기에 정말 편리합니다.&lt;br /&gt;
물론 HTML/CSS코드도 하면 재활용할 수 있지만 이는 말그대로 재활용이고, 상황에 맞게 코드를 수정해주어야 합니다.&lt;/p&gt;

&lt;p&gt;컴포넌트를 재사용한다는 것은, 기존 HTML/CSS/JS로 작성된 소스코드를 마치 &lt;strong&gt;함수 호출하듯 편리하게 사용&lt;/strong&gt;하는것을 의미합니다.&lt;br /&gt;
저에게는 이것이 React를 배우는 데 걸리는 어떤 어려움도 커버할 수 있을만한 큰 장점이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;프론트엔드 코드를 객체지향적으로 다루는 것 또한 저에게 장점으로 다가왔습니다.&lt;/p&gt;

&lt;h2 id=&quot;nodejs&quot;&gt;사용한 라이브러리 :Node.js&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;저는 여태 서버 프로그램을 작성하기 위해 Spring framework의 Spring boot를 사용했습니다.&lt;br /&gt;
스프링 부트를 사용하면서 딱히 불만이나 단점에 대해 생각해본 적이 없고, 오히려 SpringFramework는 국내에서 주도적으로 사용되는 만큼 문서가 풍부하고 한국 내 커뮤니티도 활발해 버그를 해결하는 것이 어렵지 않았습니다.&lt;/p&gt;

&lt;p&gt;그러던 어느날 저는 어떤 계기로 Nodejs의 express 라이브러리를 이용해 서버 프로그램을 작성해보았고, 스프링을 사용할때와 상당히 다른 느낌을 받았습니다.&lt;br /&gt;
짧은 기간 사용했지만, 그 느낌을 공유해볼까 합니다.&lt;/p&gt;

&lt;p&gt;스프링같은 경우, 엔터프라이즈급 서버 프로그램을 위한 &lt;strong&gt;“프레임워크”&lt;/strong&gt;이기 때문에,&lt;br /&gt;
시작부터 어떤 틀 위에서 시작하고, 여러가지 설정을 거쳐 프로젝트를 시작합니다. 누군가는 이 과정이 너무 복잡하고 쓸데없다고 말하지만, 저는 절대 그렇게 생각하지 않습니다.&lt;br /&gt;
프로젝트를 시작함과 동시에 많은 부분을 프레임워크로부터 보장받는 것이기에, 프레임워크를 사용하는것과 Node같은 라이브러리 패키지를 사용하는 것과의 장단점을 비교하는 것은 의미가 없다고 생각합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Springboot : 46.1k stars, 662 contributers&lt;br /&gt;
nodejs : 68.3k stars, 2657contributers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다만 Node.js 런타임 뿐만 아니라 Javascript 라이브러리 전반적으로 커뮤니티 활성화 정도가 매우 높다고 느꼈습니다.&lt;br /&gt;
위는 Nodejs와 Spring project의 컨트리뷰터 수입니다. 물론 Node는 Spring과 비교될 격이 아니고, OpenJRE나 OpenJDK와 비교해야 옳지만, jre,jdk는 상용 버전인 oracle의 비중이 더 높기에 최대한 커뮤니티 활정정도를 비교할만한 지표로 생각했습니다.&lt;/p&gt;

&lt;p&gt;커뮤니티 활성 정도를 보며 한편으론 다른 재단이나 커뮤니티에 비해 유저들이 참여해 생성해낸 프로젝트가 큰 영향력을 갖는 것이 신기했습니다.&lt;/p&gt;

&lt;p&gt;Spring같은 경우 pivotal이라는 회사에서 spring 관련 프로젝트를 시작하고 키워나가는 방식입니다. 어찌보면 pivotal이 무조건 메인 프로젝트이므로 유저에게 선택권이 줄어들 수 있다고 생각할 수 있습니다.&lt;br /&gt;
(스프링은 스프링 자체의 설계 방식이 있기에 어쩔 수 없습니다. 저는 잘 모르지만 이 방식이 같는 장점 또한 있을 것입니다.)&lt;/p&gt;

&lt;p&gt;반면 Nodejs의 경우 인증이라는 커다란 부분을 담당하는 패키지 Passport.js는 개인이 설립한 프로젝트임에도 유저들에게 그 편리성과 효용성을 입증받아 가장 많이 사용되는 패키지로 선택되었습니다. 이런 적자생존 방식으로 생태계가 유지되는 것이 매우 어렵지만, 그만큼 유저에게 많은 편리함을 주고있다고 생각했습니다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;마무리&lt;/h3&gt;

&lt;p&gt;나름 장단점을 설명한다고 글을 썼지만, 너무 장점 위주로 설명한 것 같습니다…&lt;br /&gt;
생태계가 활발하고 자주 변화한다고 좋은 것만은 아니라고 생각합니다. 유저는 변화한 내용을 계속 학습하는 것에 비용이 많이 발생할 수도 있고, 새로운 보안 취약점이 발생하거나 기반 패키지가 업데이트 된 경우 상위 패키지와 호환성이 떨어질 수도 있습니다.&lt;/p&gt;

&lt;p&gt;마지막 부분, nodejs의 특징을 조금 더 잘 설명하기 위해 제가 경험한 Spring framework와 비교하며 작성했지만, 위에 말씀드렸 듯 모든것에는 장단점이 있으니, 프로젝트에 사용할 기술스택을 잘 선택하셨으면 합니다!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Mar 2020 09:53:54 +0900</pubDate>
        <link>http://lee95292.github.io/web/2020/03/15/jslibrary-introduce.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/web/2020/03/15/jslibrary-introduce.html</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>글또 4기 시작, 다짐글</title>
        <description>&lt;p&gt;글또 4기 다짐글 : 근거있는 변화와 계획!&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;글또를 하게 된 계기&lt;/h1&gt;

&lt;p&gt;나는 아래의 목적을 가지고 글을 썼지만, 글을 쓰는것에 대한 동기부여가 희미해졌다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;버그리포트를 열심히 써서 나중에 똑같은 에러가 터졌을때 참고하자 » 검색해서 보는게 빠르고 정확했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자기PR: 나의 꾸준함을 글쓰기로 보여주자 » 나는 별로 꾸준하지도 성실하지도 않았다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공부하자: 글을 쓰면서 지식을 내면화하고 정리하자. » 이게 그나마 글을 쓸만한 동기였다.&lt;/p&gt;

    &lt;p&gt;(글을 쓰는 과정에서 내가 알고있다고 생각한 지식에 의문을 품었고, 질문에 대한 답을 찾아나가면서 많이 배웠다.)&lt;/p&gt;

    &lt;p&gt;하지만 공부하려고 글을 쓰는것은 초중고 12년 공부습관에 반하는 행동이었고, 내 생각을 읽기 쉽게 정리하는것도 생각보다 너무 힘들었다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;여전히 글쓰는것은 힘들고 귀찮지만, 생각과 상황이 조금 바뀌었다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;우선 개발자 글쓰기모임 글또라는 활동을 알게되었다.&lt;/p&gt;

    &lt;p&gt;글쓰는 또라이가 세상을 바꾼다. 이름이 멋있기도 했고, 개발자분들이 &lt;strong&gt;글쓰고 피드백, 커뮤니케이션&lt;/strong&gt;하는 모습이 너무 부럽고 빛났다.&lt;br /&gt;
(예치금을 두고 글을 쓴다는 약간의 강제성을 얻기 위해 지원하기도 했다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;글을 쓰는것이 힘든것이 아니라는것을 깨달았다.&lt;/p&gt;

    &lt;p&gt;글을 쓰는 것 자체로도 어렵지만, 글을 쓰기 위해 지식을 정리하고,확장하고, 내가 가진 질문에 대한 답을 채우는 것을 힘들어했고, 그것이 글쓰기를 멀리하게 된 이유였다.&lt;/p&gt;

    &lt;p&gt;필요한 지식만 검색해서 얻고 땡. 이게 왜 이렇게 되는지는 시간있을때만 찾아보고 아니면 애써 무시했었다.
얻은 지식을 정리하고 확장하는 일을 게을리 하면 그것은 지식의 파편으로 남아서 곧 죽은 지식이 된다.&lt;/p&gt;

    &lt;p&gt;이제는 내가 글쓰기에서 어떤 과정을 힘들어했는지 알게됐고, 극복해보려고 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;그래서 이제 어떤 글을 쓸까?&lt;/h2&gt;

&lt;p&gt;나는 개발/인프라 분야에서 흥미 분야가 광범위한 편이다.&lt;br /&gt;
(지식영역이 넓은건 아닌데, 뭔가를 알게되면 다 재미있어보이고 한번쯤 해보고싶다.)&lt;/p&gt;

&lt;p&gt;그래서 지금 쓰고싶은 글을 나열하고, 나중에 골라서 쓰면 어떨까 싶다.&lt;/p&gt;

&lt;p&gt;다루고싶은 내용&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;로버트 C 마틴 - Clean Architecture&lt;br /&gt;
Clean code를 너무 인상깊게 봐서 아키텍쳐편도 샀다. 아마 2~4주차 사이에 독후감으로 쓸 것 같다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정보처리기사 - 운영체제파트&lt;br /&gt;
나는 운영체제 연구실에서 운영체제와 많이 무관한 가상화파트를 다룬다.
하지만 면접만 보면 운영체제에 대한 질문이 빠지지 않고 나오기에 정리해야할 필요성을 느꼈다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;관심은 있지만 사용경험이 적은 오픈소스 소프트웨어들&lt;br /&gt;
ElasticSearch, openstack, Kafka, Zepplin - 컨트리뷰션을 목표로 공부하고 분석하고 사용해보고싶다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 이전에도 포스팅 스택은 항상 차있었지만, 글을 쓰기 전에 흥미가 다른곳으로 돌아간 경우가 많다.&lt;/p&gt;

&lt;p&gt;하지만! 이번엔 능동적인 글쓰기를 목표로, (다루고싶은 내용)에 적힌 글을 쓸 것이다.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Feb 2020 19:14:43 +0900</pubDate>
        <link>http://lee95292.github.io/etc/2020/02/29/geultto_start.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/etc/2020/02/29/geultto_start.html</guid>
        
        
        <category>etc</category>
        
      </item>
    
      <item>
        <title>[INTG Project] 개념이 잘 정리된 링크| 테크블로그| 공식 Document 모음</title>
        <description>&lt;p&gt;Spring boot - cloud - database - frontend - devops -security&lt;/p&gt;

&lt;p&gt;웹 서비스를 위한 폭넓은 개발스택을 갖추길 희망합니다.&lt;/p&gt;

&lt;p&gt;저만을 위한 링크북 인덱스이고, 제가 이해한 글들을 모아놓았지만, 비슷한 목표를 가진분들이 참고하시면 좋을것 같습니다.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;개념이 잘 정리된 링크&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;시스템 OS/Linux/Windows/JVM&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://wiki.kldp.org/HOWTO/html/Adv-Bash-Scr-HOWTO/&quot;&gt;고급 쉘 스크립트 사전&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.lael.be/post/73&quot;&gt;우분투 서버세팅(운영환경 관련 bash명령어)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.holaxprogramming.com/2017/10/09/java-jvm-performance/&quot;&gt;JVM 메모리 관리구조&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://yaboong.github.io/java/2018/05/26/java-memory-management/&quot;&gt;JVM Stacc, Heap 할당방법&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;웹&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Front
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://velog.io/@jeff0720/React-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-Webpack-%EA%B8%B0%EC%B4%88#%EC%9B%B9%ED%8C%A9%EC%9C%BC%EB%A1%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%8C%8C%EC%9D%BC-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0&quot;&gt;Webpack - React 설정&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Back
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1160&quot;&gt;JWT 개념&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://all-record.tistory.com/186&quot;&gt;우분투환경에서 단순 배포하기_W&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Spring
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/167&quot;&gt;Spring bean 생성과정&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라우드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098&quot;&gt;VPC(Virtual Private Clout)개념, 클라우드 네트워크 헷갈릴 때 보기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git &amp;amp; github&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0&quot;&gt;git reset(add,commit 리셋)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;알고리즘
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/blog/view/9&quot;&gt;세드먼트 트리&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기타
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://heropy.blog/2017/09/30/markdown/&quot;&gt;Markdown 문법&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;document&quot;&gt;공식 Document&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/&quot;&gt;Java8 API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kgmyh.github.io/blog/2017/12/02/spring-boot-chapter01/&quot;&gt;spring boot(한글)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;2&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/&quot;&gt;Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;도커&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/ko/docs/home/&quot;&gt;k8s(한글)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com&quot;&gt;Android&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/&quot;&gt;node&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;기업| 개인 기술블로그&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;사실 &lt;a href=&quot;https://medium.com/@Dongmin_Jang/%EC%97%85%EC%B2%B4%EB%B3%84-%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8-e2d736d0e658&quot;&gt;테크블로그는 여기&lt;/a&gt;에 다 정리되어있다. 내가 자주보는 한글 블로그 위주로 모았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/home&quot;&gt;네이버 D2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tech.kakao.com/&quot;&gt;카카오 기술블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/coupang-tech&quot;&gt;쿠팡 기술블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xguru.net/&quot;&gt;구루(권정혁님) 기술블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 27 Jan 2020 14:46:00 +0900</pubDate>
        <link>http://lee95292.github.io/%ED%95%98%EB%82%98%EB%A1%9C_%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/2020/01/27/INTG_TheoryLink-TheoryLink.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/%ED%95%98%EB%82%98%EB%A1%9C_%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/2020/01/27/INTG_TheoryLink-TheoryLink.html</guid>
        
        
        <category>하나로_정리하기</category>
        
      </item>
    
      <item>
        <title>heritrix 오픈소스 웹 크롤러 사용하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Heritrix 오픈소스 웹 크롤러를 사용해보고 방법을 정리하려합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;자세한 사용법은 &lt;a href=&quot;https://github.com/internetarchive/heritrix3/wiki/&quot;&gt;github 위키&lt;/a&gt;에 잘 나와있지만, 기본적인 부분,헷갈릴만한 부분이나 자주 사용할만한 옵션들을 소개해보도록 하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;설치&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://builds.archive.org/maven2/org/archive/heritrix/heritrix/3.4.0-SNAPSHOT/heritrix-3.4.0-20190828.200101-25-dist.tar.gz

tar -xzf heritrix-3.4.0-20190828.200101-25-dist.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-설치 끝&lt;/p&gt;

&lt;p&gt;설치는 매우 간단하지만,&lt;/p&gt;

&lt;p&gt;설정이 꽤 귀찮고 모호한 부분이 있습니다. spring xml properties를 사용해서 직접 설정합니다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;일단 기본 설정으로 크롤링 진행&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Heritrix/bin

./heritrix -a admin:amdin -b /

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;-a 옵션으로 계정을 설정하고, -b옵션을 통해 접근권한을 설정합니다.&lt;/li&gt;
  &lt;li&gt;-b옵션 없이 실행하는 경우, localhost에서만 사용 가능하고,&lt;/li&gt;
  &lt;li&gt;-b / 로 옵션을 주는경우, 어디서든 계정으로 엑세스할수 있습니다.&lt;/li&gt;
  &lt;li&gt;-p 옵션으로 포트를 지정할 수 있습니다.(기본 : 8443)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(b옵션을 못찾고 포트포워딩하느라 시간을 많이 썼습니다…)&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;크롤링 수행&lt;/h3&gt;

&lt;p&gt;Create job으로 job(크롤링 작업 단위) 생성합니다.&lt;/p&gt;

&lt;p&gt;생성하면 Hritrix_home/jobs/[job_name]/crawler-beans.cxml 파일 생깁니다.&lt;/p&gt;

&lt;p&gt;웹페이지에서 해당 파일을 수정할 수도 있지만, 저같은경우 에러가 떠서 직접 수정했습니다.&lt;/p&gt;

&lt;p&gt;기본설정&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#1
metadata.operatorContactUrl=http://lee95292.github.io

...

#2
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;longerOverrides&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.config.PropertyOverrideConfigurer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;props&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;seeds.textSource.value&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

# URLS HERE
http://lee95292.github.io

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/props&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;즉, metadata.operatorContactUrl을 지정하고 #URLs Here 표시된 곳 밑에 URL을 추가해주면 됩니다.&lt;/p&gt;

&lt;p&gt;operatorContactUrl에 대해서는 자세한 설명이 나와있지는 않네요..&lt;/p&gt;

&lt;p&gt;저장 한 후, jobs 페이지에서 크롤링을 수행합니다.&lt;/p&gt;

&lt;p&gt;build &amp;gt; launch 후 기다리시면 크롤링 작업이 완료됩니다.&lt;/p&gt;

&lt;p&gt;pause를 통해 중지&lt;br /&gt;
terminate를 통해 중단&lt;br /&gt;
teardown을 통해 종료할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;옵션&lt;/h3&gt;

&lt;p&gt;crawler-beans.cxml에서 설정가능한 옵션들입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TransclusionDecideRule을&lt;/strong&gt; 삭제하시면 narrow crawling을 수행합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;seed host로 등록한 이외의 호스트를 크롤링하지 않습니다.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;postprocess&quot;&gt;PostProcess&lt;/h3&gt;

&lt;p&gt;크롤링 결과물을 처리하는 방법입니다.. 유튜브에서 &lt;a href=&quot;https://www.youtube.com/watch?v=MAHWPeBVNpI&amp;amp;t=447s&quot;&gt;참고&lt;/a&gt;했습니다.&lt;/p&gt;

&lt;p&gt;pip install warctools&lt;br /&gt;
(pip3)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hanzo&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warctools&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;warcStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warctools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WarcRecored&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WEB-20200121115637651-00000-20607~ip-172-31-35-42.ap-northeast-2.compute.internal~8443.warc.gz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warcStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;********&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;warc record #&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Jan 2020 06:02:12 +0900</pubDate>
        <link>http://lee95292.github.io/opensource/2020/01/21/heritrix_use.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/opensource/2020/01/21/heritrix_use.html</guid>
        
        
        <category>opensource</category>
        
      </item>
    
      <item>
        <title>ProjectDesign</title>
        <description>&lt;h1 id=&quot;project-beta---&quot;&gt;Project Beta 화면 및 구현설계&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;기능개요&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;키워드 등록을 통한 타겟 알림 시스템 (ElasticSearch 활용)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;등록한 키워드와 관심분야 설정을 통한 문서 추천 시스템 ( &lt;a href=&quot;https://yeomko.tistory.com/6?category=805638&quot;&gt;Collaborative Filtering&lt;/a&gt;활용 )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1. 키워드 등록을 통한 타겟 알림 시스템&lt;/h3&gt;

&lt;p&gt;크롤링 시나리오&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;크롤링할 호스트에 대한 설정파일 참조&lt;/li&gt;
  &lt;li&gt;graph,linked list 형식으로 링크 관계 저장 / 리스트에 존재하는 문서 크롤링
    &lt;ul&gt;
      &lt;li&gt;1 Search Process : 그래프 refresh를 통해 새로운 문서가 있는지 판별&lt;/li&gt;
      &lt;li&gt;2-1. 새로운 문서가 있다면 문서의 메타정보를 그래프에 저장&lt;/li&gt;
      &lt;li&gt;2-2. 문서의 Topic판별, 단어 추출 등, Elastic에 저장하기 위한 구성 설정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Elastic 쿼리 전송&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;키워드 등록 시나리오&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러개의 호스트에 여러개의 키워드 등록 가능하도록 설정
    &lt;ul&gt;
      &lt;li&gt;Create: 여러개의 키워드를 한번에 요청한경우 어근 추출을 통해 압축 (만들기,만들어 -&amp;gt;만들다)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 15 Jan 2020 23:17:29 +0900</pubDate>
        <link>http://lee95292.github.io/2020/01/15/ProjectDesign.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/2020/01/15/ProjectDesign.html</guid>
        
        
      </item>
    
      <item>
        <title>[vscode] vscode 확장 프로그램 환경 구성</title>
        <description>&lt;p&gt;본 포스팅은, &lt;a href=&quot;https://code.visualstudio.com/api&quot;&gt;VSCode extension development docs&lt;/a&gt;를 학습하며 작성했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git과 Node.js를 사전 설치 후에 진행해주시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 프로젝트 생성&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;npm install -g yo generator-code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;npm을 통해 위 두 개 모듈을 설치합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;yo (yoman) -코드 스캐폴딩 도구 : 프로젝트 뼈대를 생성해주는 도구&lt;/li&gt;
  &lt;li&gt;generator-code - vsocde ext 뼈대 코드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yo code
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;설치한 모듈을 통해 프로젝트 뼈대를 생성하고 커멘드라인에 정보를 알맞게 제공합니다 ( 프로젝트 이름 등등,,)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;code ./[project_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;F5버튼을 눌러 빌드하면, &lt;strong&gt;Extension Development Host&lt;/strong&gt;가 동작합니다.&lt;/p&gt;

&lt;p&gt;확장도구 테스팅 환경이라 보시면 될 듯 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개발환경에서 소스코드 저장 후, &lt;strong&gt;Extension Development Host&lt;/strong&gt;에서 리로드(Ctrl + R)하면 변경사항이 저장됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extension-&quot;&gt;2. Extension 세부정보&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── .vscode
│   ├── launch.json     // Config for launching and debugging the extension
│   └── tasks.json      // Config for build task that compiles TypeScript
├── .gitignore          // Ignore build output and node_modules
├── README.md           // Readable description of your extension's functionality
├── src
│   └── extension.ts    // Extension source code
├── package.json        // Extension manifest
├── tsconfig.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;yoman으로 뼈대를 생성하면 코드 구조는 위와 유사합니다.&lt;/p&gt;

&lt;p&gt;이 때 ,확장 프로그램의 세부정보(Manifest)는 package.json에 위치합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;name,publisher&lt;/strong&gt; 는 프로젝트의 유니크한 아이디를 구성하는데 사용합니다.&lt;/li&gt;
  &lt;li&gt;main은 extension 실행의 entry point를 가르킵니다. (프로젝트의 시작점)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 예시 소스코드&lt;/h2&gt;
</description>
        <pubDate>Thu, 26 Dec 2019 07:43:24 +0900</pubDate>
        <link>http://lee95292.github.io/boostcourse/2019/12/25/vscode-_extensionDevelopment.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/boostcourse/2019/12/25/vscode-_extensionDevelopment.html</guid>
        
        
        <category>boostcourse</category>
        
      </item>
    
      <item>
        <title>[Mysql] mysql 원격 접속 가능하도록 설정하기</title>
        <description>&lt;ol&gt;
  &lt;li&gt;mysql 서버에서, remote주소를 통해 접근가능한 계정을 생성한다&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;create user [usrname]@[remote_addr] identified by [passowrd];
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/mysql/mysqld/mysqld.conf.d/mysqld.cnf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;아래와 같은 내용이 들어있는 설정파일에서,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;bind-address항목을 mysql 서버의 주소(외부에서 접근가능한 자기자신의 퍼블릭 주소)를 기재한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysqld]
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# * Basic Settings&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
user            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; mysql
pid-file        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/run/mysqld/mysqld.pid
socket          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/run/mysqld/mysqld.sock
port            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3306
basedir         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr
datadir         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/lib/mysql
tmpdir          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /tmp
lc-messages-dir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/share/mysql
skip-external-locking
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Instead of skip-networking the default is now to listen only on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# localhost which is more compatible and is not less secure.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;-address            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;이후, servicee mysql restart&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 05 Dec 2019 06:23:51 +0900</pubDate>
        <link>http://lee95292.github.io/boostcourse/2019/12/04/enable-mysql-remote.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/boostcourse/2019/12/04/enable-mysql-remote.html</guid>
        
        
        <category>boostcourse</category>
        
      </item>
    
      <item>
        <title>[Jenkins] 젠킨스 원격 배포 (CD) 수행하기</title>
        <description>&lt;p&gt;젠킨스 서버에서 CI된 결과물을 원격 서버에 CD하기.&lt;/p&gt;

&lt;p&gt;선결조건&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;젠킨스 구동 중&lt;/li&gt;
  &lt;li&gt;CI(빌드) 세팅 완료&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;원리&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;publish over ssh 플러그인 사용&lt;/li&gt;
  &lt;li&gt;scp를 통해 배포파일 (spring의 경우는 **.jar) 전송&lt;/li&gt;
  &lt;li&gt;ssh를 통해 배포파일 실행(서버 가동스크립트)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jenkins-on-use--1------&quot;&gt;Jenkins on use -1 : 사전  설정 (원격지 등록)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Jenkins &amp;gt; Jenkins관리 &amp;gt; 시스템 설정화면&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/jenkins/jenkins_001.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;아래쪽 publish over ssh 탭 작성&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Key 탭 - 원격지에 접근하기 위한 키 작성&lt;/p&gt;

&lt;p&gt;SSH Servers탭 - 배포파일을 전송할 원격지&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Name - 구분을 위한 이름&lt;/li&gt;
  &lt;li&gt;hostname - 호스트 주소&lt;/li&gt;
  &lt;li&gt;username - 연결을 위한 유저 이름&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;왼쪽 아래 저장버튼을 눌러 원격지 등록 완료!&lt;/p&gt;

&lt;h3 id=&quot;jenkins-on-use--2---ci----&quot;&gt;Jenkins on use -2 : 프로젝트 빌드(CI) 이후 원격지로 실제 배포하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;각자 프로젝트  선택 &amp;gt; 구성 &amp;gt; Build탭의 add build step &amp;gt; send files or execute commands over SSH&lt;/strong&gt;
&lt;img src=&quot;/assets/img/jenkins/jenkins_002.PNG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;접속 이후 수행동작 작성하기&lt;/strong&gt;
&lt;img src=&quot;/assets/img/jenkins/jenkins_003.PNG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;항목들  설명&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SSH Server - Name - 사전 설정과정에서 등록한 서버의 이름&lt;/li&gt;
  &lt;li&gt;Transfes
    &lt;ul&gt;
      &lt;li&gt;Source files : 젠킨스 서버에서 빌드 완료된 배포파일(전송할 배포파일)&lt;/li&gt;
      &lt;li&gt;Exec command : 배포파일 실행 명령&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;저장을 눌러 배포 설정 완료하고,&lt;/p&gt;

&lt;p&gt;빌드 수행!&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Dec 2019 08:07:01 +0900</pubDate>
        <link>http://lee95292.github.io/devops/2019/12/03/Jenkins-_publishOverSSL.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/devops/2019/12/03/Jenkins-_publishOverSSL.html</guid>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>[Spring Boot,토막글] Spring boot 프로젝트에서 여러개의 설정파일 추가</title>
        <description>&lt;p&gt;스프링에서 API Key 또는 비밀스러운 정보를 따로 관리해야 할 때(에를 들어 public git 시스템에 푸쉬), 역할에 따른 설정파일이 필요할 때는 application.yml 이외의 설정파일을 추가해야합니다.&lt;/p&gt;

&lt;p&gt;이 떄, 스프링 부트에서 설정파일을 나누는 방법으로, 별도의 설정 없이 ***.yml파일 추가 후, 아래 코드와 같이 실행파일의 경로를 등록해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableGlobalMethodSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;securedEnabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JclipProtoApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
											&lt;span class=&quot;s&quot;&gt;&quot;spring.config.location=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
											&lt;span class=&quot;s&quot;&gt;&quot;classpath:/application.yml,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
											&lt;span class=&quot;s&quot;&gt;&quot;classpath:/private.yml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpringApplicationBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JclipProtoApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		
&lt;span class=&quot;c1&quot;&gt;//		SpringApplication.run(JclipProtoApplication.class, args);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 13 Nov 2019 21:00:00 +0900</pubDate>
        <link>http://lee95292.github.io/spring/2019/11/13/multi_prop.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/spring/2019/11/13/multi_prop.html</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>[React] 리액트 라우터 on use</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;간단한 기록용 포스트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;공통적으로,&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-router-dom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;route---path-component--&quot;&gt;Route - path와 component 속성으로 설명해보자.&lt;/h3&gt;

&lt;p&gt;exact path와 일치하는 component를 보여준다. 즉,&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{Home}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 경우 url상에서 루트 경로일 때, Home 컴포넌트를 보여주는 것.&lt;/p&gt;

&lt;p&gt;즉, Route는 의미적(Semantic)인 컴포넌트이고, URL의 정보를 참조해서 뷰를 보여주는 역할을 수행한다.&lt;/p&gt;

&lt;p&gt;(이 때, exact path가 아니라 path만을 사용한다면, path=”/about” 인 설정의 경우, path=”/” 과 path=”/about”의 라우트까지 모두 보여준다.&lt;br /&gt;
즉, exact하지 않는 매칭을 한다)&lt;/p&gt;

&lt;h3 id=&quot;parameter&quot;&gt;Parameter&lt;/h3&gt;

&lt;p&gt;parameter는 url path 뒤에 콜론(:)을 붙여 입력받는다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import {Router} from 'react-router-dom';

...
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;Route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/about/:name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{About}/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(전달예시)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://localhost:3000/about/mklee
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 경우, ‘mklee’가 About 컴포넌트에 파라미터로 사용한다.&lt;/p&gt;

&lt;p&gt;이 때,  About의 컴포넌트는 &lt;strong&gt;const name=match.params.name&lt;/strong&gt; 과 같이 해당 값을 사용한다&lt;/p&gt;

&lt;h3 id=&quot;link-----router&quot;&gt;Link 컴포넌트를 통해 새로고침 없는 Router이동&lt;/h3&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import {Link} from 'react-router-dom'
...

&lt;span class=&quot;nt&quot;&gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/about&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; About &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Link&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;a 태그를 통해 URL을 변경시키고 이동할 수도 있지만, 새로고침 없이 Link 컴포넌트를 통해 새로고침 없는 페이지전환이 가능하다.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Sep 2019 00:00:00 +0900</pubDate>
        <link>http://lee95292.github.io/react/2019/09/12/React-Router_on_use.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/react/2019/09/12/React-Router_on_use.html</guid>
        
        
        <category>react</category>
        
      </item>
    
  </channel>
</rss>
