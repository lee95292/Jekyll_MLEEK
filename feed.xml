<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mleek's blog</title>
    <description>Mleek's blog_ study note &amp; daily life
</description>
    <link>http://lee95292.github.io/</link>
    <atom:link href="http://lee95292.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Aug 2020 21:01:29 +0900</pubDate>
    <lastBuildDate>Sat, 01 Aug 2020 21:01:29 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>카프가 개요 &amp; 실습(세미나 정리, Pending)</title>
        <description>&lt;h2 id=&quot;t----&quot;&gt;T 아카데미 아파치 카프카 세미나&lt;/h2&gt;

&lt;p&gt;강의자 : 최원영 (SK planet), DEV원영님&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;개요&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;여러 Appication node들이 생성되면서 node별로 파이프라인 연결, 코드 복잡성이 증가함&lt;/li&gt;
  &lt;li&gt;데이터 연동의 복잡성 증가&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;중추 신경처럼 하나의 노드에 집중하자!&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;모든 데이터를 브로커로 집중킴.. » 처리량 중요 , 스케일아웃, 클러스터링, 고가용성 보장&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Broker? 메타데이터를 저장하는 주키퍼와 연동, 컨슈머와 프로듀서 사이의 데이터 중재&lt;/li&gt;
  &lt;li&gt;Record? 정제된 토픽 데이터. 직렬/역직렬화해 컨슈머로 전달됨&lt;/li&gt;
  &lt;li&gt;POJO &amp;gt; 커스텀 오브젝트로 역/직렬화 사용&lt;/li&gt;
  &lt;li&gt;기본제공 직렬화 : StringSerializer&lt;/li&gt;
  &lt;li&gt;Topic? 1개 이상 존재, 1개 이상의 파티션으로 구성, 파티션 내에서는 오프셋이 붙고, 숫자가 높을수록 최신&lt;/li&gt;
  &lt;li&gt;Producer?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;저장 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;파일시스템 단위로 저장, 메시지가 저장될땐 세그먼트파일이 열려있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;컨슈머 &amp;gt; 파티션인 경우, 컨슈머 하나가 놀게됨, 이렇게는 사용 X&lt;/p&gt;

&lt;p&gt;2개 이상의 컨슈머 그룹을 사용하는 경우도 있음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1개 컨슈머의 장애에 대응&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;브로커같은 경우, &lt;strong&gt;레플리카&lt;/strong&gt;를 통해 이슈에 대응.&lt;/p&gt;

&lt;p&gt;브로커 버전 / 클라이언트 버전 맞추기!&lt;/p&gt;

&lt;p&gt;에러가 나진 않지만 성능상 ㅁ누제&lt;/p&gt;

&lt;h1 id=&quot;producer-acks---&quot;&gt;Producer acks **매우매우 중요한 옵션&lt;/h1&gt;

&lt;p&gt;ack: 속도와 유실에 관한 설정 (브로커 여러개일 때 의미 가짐: ppt 83)&lt;/p&gt;

&lt;p&gt;ack 0 : 연결된 즉시 성공으로 간주 속도 빠름&lt;/p&gt;

&lt;p&gt;ack 1: reader 파티션에 저장되었는지 확인하면 성공&lt;/p&gt;

&lt;p&gt;ack all : 리더 , 팔로워, 파티션에 저장되었는지 확인. 유실가능성 없음. 팔로워 파티션이 여러개 일수록 성능 저하, 신뢰도 상승&lt;/p&gt;

&lt;p&gt;리밸런스 리스너 : 파티션 새로 할당 / 끊어졌을 때 신호 받기, 컨슈머가 많을 때 참고 위해 컨슈머 모니터링&lt;/p&gt;

&lt;p&gt;200801 기준 우선순위에 밀려 Pending.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/AndersonChoi/tacademy-kafka&quot;&gt;최원영님 카프카 repo&lt;/a&gt; 와 카프카 강의에서 학습한 내용 정리할 예정입니다.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2020 22:08:48 +0900</pubDate>
        <link>http://lee95292.github.io/kafka/2020/06/19/kafka_seminar.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/kafka/2020/06/19/kafka_seminar.html</guid>
        
        
        <category>kafka</category>
        
      </item>
    
      <item>
        <title>2020 상반기 회고</title>
        <description>&lt;p&gt;회고는 항상 연말에 쓰거나 월말에 혼자 끄적였던 것 같다.&lt;br /&gt;
고민해야 할 중요한 문제가 많았으면 최대한 그 느낌이 날아가기 전에 쓰는게 좋은 것 같다.&lt;/p&gt;

&lt;p&gt;이번 회고에서는 어떤 갈림길이 있었고 나는 여기서 어떤 선택을 했었는지만 간단히 돌아보려 한다.&lt;/p&gt;

&lt;p&gt;즉, 어떤 일이 있었고, 원하는 것은 꾸준히 했는지, 뭐 하고싶은지 끄적이려 한다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;어떤 일들이 있었나?&lt;/h2&gt;

&lt;p&gt;1~ 2월&lt;br /&gt;
연구실에서 잠깐 나와 경기도 성남 소재 기업에서 개발자로 인턴을 시작했다.&lt;br /&gt;
피아노를 시작했고 글또라는 글쓰기 모임에 조인했다.&lt;/p&gt;

&lt;p&gt;3월&lt;br /&gt;
Node를 처음 시작했고 React에서는 Redux/saga 등 처음 사용하는 라이브러리를 많이 익혔다.&lt;br /&gt;
개발병 TO배정이 불안정해져 군대 문제가 다시 큰 비중을 차지했다.&lt;/p&gt;

&lt;p&gt;5월&lt;br /&gt;
정보처리기사를 준비하기 시작했다.&lt;br /&gt;
공모전을 준비하고있고, 회사로부터 정직원 제의를 받았다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;인턴생활 시작&lt;/h2&gt;

&lt;p&gt;채울 학점이 얼마 남지 않아 편하게 다닐 계획이었던 4학년 1학기에 개발팀 인턴이라는 좋은 기회가 생겼다.&lt;/p&gt;

&lt;p&gt;새로운 환경에 적응하면서 새로운 기술을 공부하는것은 당연히 힘든 일이지만, 코로나로 인해 어수선한 학교를 보니 잠깐 떠나서 다른 세상에서 살아가는 것도 좋은 선택이었던 것 같다.&lt;/p&gt;

&lt;p&gt;특히 팀과 회사가 어떤 프로세스로 돌아가는지 경험하는 것은 정말 귀중한 경험이었다.&lt;/p&gt;

&lt;h2 id=&quot;vscode----junit-testfile-generator&quot;&gt;작년에 배포한 vscode앱 리뉴얼 - Junit Testfile Generator&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/junitgen.JPG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내가 불편해서 만든 앱인데, 사용자가 1000명이 넘었다. (재설치, 업데이트를 제외하고 순수한 1000회 설치!)&lt;br /&gt;
Java 개발자들이 조금씩 인텔리제이나 이클립스 대신 VSCode를 사용하게 되면서, VSCode에 없는 인텔리제이,이클립스 기능을 찾기 시작했다. (나도 그랬고..)&lt;/p&gt;

&lt;p&gt;특히 나는 테스트파일을 만들기 위해 src아래의 tree level을 똑같이 test 아래에 만들어야 하는게 불편했다.&lt;br /&gt;
어쨋든 이런 기류에 편승해서 1000명이나 되는 사용자가 생긴게 아닌가 싶다.&lt;/p&gt;

&lt;p&gt;만들고 1~2달정도 사용한 뒤로 정작 나는 자바 개발이 뜸해져 내 맘속에선 잊혀졌는데,&lt;br /&gt;
다른 개발자분들이 내가 만든 앱을 사용하면서 Issue/email을 통해 불편한점이나 개선사항을 알려주셔서 나도 이 앱에 대한 책임감(?)이 계속 리마인드됐다.&lt;/p&gt;

&lt;p&gt;여기서 Junit 뿐만 아니라 다양한 테스트 프레임워크/라이브러리들의 test stub을 편리하게 만들어주면 좋을것같다는 생각이 들어 리뉴얼을 결심했다.&lt;br /&gt;
같은 VSCode Extension gitignore generator에 영감을 받았다.&lt;/p&gt;

&lt;p&gt;그래서 4월 말 경 앱을 다시 만들어야겠다고 결심하고, 5월에는 못했고, 6월에는 시간이 날때마다 진행할 생각이다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;정보처리기사(필기) 후기&lt;/h2&gt;

&lt;p&gt;두번 미뤄지고 우여곡절 끝에 정처기 필기시험에 응시했다. 코로나로 인해 1,2회차가 통합 시행돼 이번년도에 기회가 한번 줄었다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;사실 컴공에서 기사시험(필기)의 위상은 리눅스마스터 2급정도 되는데, 2020년 1회차부터 전면 개편된다 했고,&lt;br /&gt;
난이도가 높을것이라는 이야기가 돌았다.&lt;br /&gt;
필기는 공부 안하고, 실기는 2주정도 하는 형들이 많았는데,&lt;br /&gt;
이번 시험은 필기를 한달 전부터 공부하는분들도 보였다.&lt;/p&gt;

&lt;p&gt;나는 회사에 다니면서 하느라 1주일정도 출/퇴근시간 지하철에서, 퇴근후 시간에, 시험 전날에 반차내고 열심히 공부했다.&lt;br /&gt;
열심히라는 단어를 쓰긴 했는데, “1주일”과 “열심히”라는 단어가 같이있는게 참 어색하다.&lt;/p&gt;

&lt;p&gt;난이도가 높을거라는 얘기때문에 합격하기 힘들것같다는 생각을 하고, 합격하면 실기 공부 진짜 열심히할거라고 기도하면서 봤는데 막상 시험이 그렇게 어렵지는 않았다.&lt;/p&gt;

&lt;p&gt;1회차라 난이도 조절을 해준것 같았고, 가채점 결과 매우 여유롭게 합격했다. 실기 진짜 열심히 공부해야지..&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;병역문제가 다시 걱정의 많은 비중을 차지했다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;개발병을 준비하려했으나, 모집 TO가 전국 1명, 절망적으로 감소해 전의를 상실했다.&lt;/li&gt;
  &lt;li&gt;산업기능요원을 준비해야한다. 하지만 마찬가지로 TO가 절망적이다.&lt;/li&gt;
  &lt;li&gt;대학원 진학이 진로 후보에 올라왔지만, 적극적으로 알아보고있지 않다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아….모르겠다….&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;대학원?&lt;/h3&gt;

&lt;p&gt;연구실에서는 항상 적극적인 스탠스를 취해왔다. 연구가 재능에 맞을지는 모르지만, 관심이 있었던것은 사실이다.&lt;br /&gt;
하지만 병역이라는 커다란 일정이 뒤로 더 미뤄지면서, 도피성으로 올라온 선택지인지 자연스레 생각난 길인지 나도 헷갈린다.&lt;/p&gt;

&lt;p&gt;도피성으로 올라온 선택지라면 서울권 괜찮은 연구실에서 적당히 열심히 하면 되겠지만, 그러기에는 내 돈,시간이나 기회비용에 아쉬운 기분이 든다.&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;대학원 하니까 생각났는데…&lt;/h3&gt;

&lt;p&gt;작년 여름에 교수님께서 작성하는 연구 논문의 아이디어를 구현했는데, 이제야 그 논문이 억셉되어 곧 출판된다고 한다. 저자는 아니고 컨트리뷰터로 이름이 올라갔지만 정말 뿌듯하고 신기했다.&lt;/p&gt;

&lt;p&gt;한편으론 10개월 전에 작업한것이 이제야 올라갔다는걸 듣고, 나는 작업 결과물이 바로바로 나와야 동기를 얻는 스타일인데, 연구하는게 과연 내 적성에 맞을까도 생각해봤다.&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;계획을 돌아보면서..&lt;/h3&gt;

&lt;p&gt;2019년 하반기에는 목표가 불분명했지만, 앞에 놓여진 일을 열심히 해서인지 몇가지 일에 대해서는 꽤 만족스러운 결과를 만들어낸 시기였다.&lt;br /&gt;
하지만 그것과 별개로 진로에 대해 막연하게 생각했던 부분이 지금와서 발목을 세게 잡고있는듯 하다.&lt;/p&gt;

&lt;p&gt;2020년 상반기는 작년에 계획한것들에서 많이 엇나갔지만, 전혀 상상도 못한 일상을 보내고 있다.&lt;br /&gt;
미래의 계획을 세우는것은 그 때의 상황이나 기분을 파악하지 않은 계획이기때문에 오래전에 세운 게획대로 살아가는건 힘들다.&lt;br /&gt;
앞으로 회고에서는 과거의 행적을 돌아보고 행적에 대한 계획보다는 방향, 단기간 목표를 설정해야겠다.&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;계획은 힘들지만 진로는 설정해야하는데..&lt;/h3&gt;

&lt;p&gt;사실 대학원도 매력적인 선택이다. 회사에 남아서 깊이와 넓은 시야를 갖는것도 매력적인 선택이다. 군대만 아니면 행복한 고민을 했겠지만, 고민을 하는 내내 군대 문제가 내 옆구리를 가시처럼 쿡쿡 찔러댔다.&lt;/p&gt;

&lt;p&gt;대학원에 바로 지원할 수도 있지만 그렇게 하기 싫었다.&lt;br /&gt;
기본적으로는 정보가 없고, 적성에 대한 확신도 없었고, 무엇보다 도피성이 아닌가 하는 생각이 강하게 들어서였다.&lt;/p&gt;

&lt;p&gt;일단 회사에 남아 일을 더 해보려고 한다.&lt;/p&gt;

&lt;p&gt;하지만 이대로 퇴근 후 널브려져있는 내 모습은 참기 힘들다..&lt;/p&gt;

&lt;p&gt;최대 7개월동안 내 목표를 설정해봤다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache TLP 컨트리뷰션&lt;/li&gt;
  &lt;li&gt;피아노 레슨 꾸준히 받기&lt;/li&gt;
  &lt;li&gt;영어책 1권 익숙해지기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;요새 매일 출근해서 퇴근할때까지 일하는만큼은 학교에서도 하고싶다.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 11:50:58 +0900</pubDate>
        <link>http://lee95292.github.io/%ED%9A%8C%EA%B3%A0/2020/06/07/2020_firstHalfOfYear.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/%ED%9A%8C%EA%B3%A0/2020/06/07/2020_firstHalfOfYear.html</guid>
        
        
        <category>회고</category>
        
      </item>
    
      <item>
        <title>[Continue,OS] 메모리파트 정리</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;주제 : 운영체제 메모리 관리: 물리메모리 할당 방식!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;목차&lt;/li&gt;
  &lt;li&gt;연속 메모리 할당
    &lt;ul&gt;
      &lt;li&gt;고정 분할 방식 Fixed Allocation&lt;/li&gt;
      &lt;li&gt;가변 분할 방식 Variable Allocation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비연속 메모리 할당
    &lt;ul&gt;
      &lt;li&gt;세그멘테이션 Segmentation&lt;/li&gt;
      &lt;li&gt;페이징 Paging&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;—continue—&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;페이징/세그멘테이션 혼합&lt;/li&gt;
      &lt;li&gt;페이지 요구 Demand Paging&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;section&quot;&gt;연속 할당 방식&lt;/h1&gt;

&lt;p&gt;하나의 프로그램이 실행되는 메모리 순서를 연속적으로 물리 메모리에 할당하는 방법&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;고정 분할 방식&lt;/h3&gt;

&lt;p&gt;물리적 메모리를 몇 개의 영구적인 분할로 나누어 각각의 영역에 프로그램을 적재시킨다.&lt;/p&gt;

&lt;p&gt;심각한 내부 단편화가 발생할 수 있다. &lt;br /&gt;
예를 들어 256MB의 메모리를 32MB씩 분할한다면, 2MB의 메모리만이 필요한 프로그램이 실행되는 경우 30MB의 내부 단편화가 발생한다.&lt;br /&gt;
(보통은 다양한 크기의 프로그램을 실행하기 위해 메모리를 다양한 크기로 분할한다.)&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;가변 분할 방식&lt;/h3&gt;

&lt;p&gt;프로그램이 실행/종료되는 시점마다 프로그램 크기에 맞는 메모리를 할당/해제하는 방식.&lt;/p&gt;

&lt;p&gt;첫 할당 이후 메모리 위치를 재정리할 수 없으므로, 다양한 크기의 프로그램에 대해 메모리 할당/해제를 반복하다 보면 아래와 같이 외부 단편화가 발생한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----------------------------------------------------
| running(120MB) | empty(20MB) | running(8MB) | ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;section-3&quot;&gt;비연속 할당 방식&lt;/h1&gt;

&lt;p&gt;프로그램의 메모리 할당 요청을 비연속적으로 메모리에 할당하는 방식. swap space를 사용하는 가상화 기법이 활용된다.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;세그먼트 :&lt;/h3&gt;

&lt;p&gt;메모리를 나누는 단위.&lt;/p&gt;

&lt;p&gt;세그먼트: 프로세스 크기에 따라 가변 크기를 갖는 &lt;strong&gt;물리 메모리 분할 단위&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-5&quot;&gt;페이지 / 프레임&lt;/h3&gt;

&lt;p&gt;페이지 : 고정 크기로 &lt;strong&gt;가상 메모리를 분할하는 단위&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프레임 : 페이지와 1:1로 매핑되는 &lt;strong&gt;물리 메모리 분할 단위&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;페이지와 프레임은 페이지 테이블을 매개로 연결된다.&lt;/p&gt;

&lt;p&gt;따라서, 프로세스가 page(N)을 가지고있을 경우, OS는 가상주소 N에 데이터를 요청하고, 가상주소 N은 페이지 테이블의 정보를 통해 물리 주소인 frame(K)에 접근한다. 이 때, frame(k)주소가 존재하지 않을 경우, swap space(주로 보조 기억장치)에서 데이터를 가져온다. 이는 page fault라고 불리며, 이는 성능 저하를 일으키기도 하며 segmentation-paging 기법에서 Thrashing 등을 일으켜 심각한 성능 저하를 내기도 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-6&quot;&gt;페이지 테이블 / 페이징 기법&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;페이징 기법&lt;/strong&gt; : 가상 메모리를 &lt;strong&gt;고정 크기&lt;/strong&gt;로 분할한 페이지를 통해 메모리를 관리하는 방식.&lt;br /&gt;
만약 프로세스가 페이지의 크기보다 적은 메모리를 필요로 하는 경우, &lt;strong&gt;내부 단편화((페이지)내부의 메모리 일부가 사용되지 않아 낭비되는 현상)&lt;/strong&gt;가 발생한다.&lt;/p&gt;

&lt;p&gt;(페이지의 크기 :프로세스의 크키가 커지면서 4KB &amp;gt; 4MB까지 크기가 커짐.)&lt;/p&gt;

&lt;p&gt;LRU, FIFO, LFU, NUR등의 페이지 교체 알고리즘을 통해 물리 메모리를 관리.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;페이지 테이블&lt;/strong&gt; : 페이지와 프레임의 매칭 정보를 담고있는 테이블.&lt;/p&gt;

&lt;p&gt;프로세스가 가상 메모리(page)의 정보를 hit할때 실제 물리 메모리 주소(frame)로 변환하는 역할을 수행한다.&lt;/p&gt;

&lt;p&gt;페이지의 크기가 커지면 아래와 같은 변화가 생긴다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;내부 단편화가 증가한다.&lt;/li&gt;
  &lt;li&gt;Page fault(페이지 요청 실패)가 감소한다.&lt;/li&gt;
  &lt;li&gt;페이지 테이블의 크기가 감소한다.
    &lt;ul&gt;
      &lt;li&gt;(TMI)페이지 테이블 비례 : 전체 메모리 사이즈 /  페이지 크기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-7&quot;&gt;세그멘테이션 테이블 /세그멘테이션 기법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;세그멘테이션 기법&lt;/strong&gt; : 하나의 프로세스가 사용하는 메모리의 크기 단위로 가상 주소를 관리하는 기법.&lt;/p&gt;

&lt;p&gt;프로세스별로 요구하는 메모리가 다르므로, 세그먼트의 크기는 가변적이다.&lt;/p&gt;

&lt;p&gt;세그멘테이션 테이블 :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;물리 메모리에서 세그먼트의 &lt;strong&gt;start address&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;가변적인 세그먼트의 크기를 나타내는 &lt;strong&gt;limit&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 두 가지를 보관하고 있는 자료구조이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-8&quot;&gt;세그멘테이션-페이징 혼합 기법&lt;/h3&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;h3 id=&quot;pcb-process-control-block&quot;&gt;PCB: Process Control Block&lt;/h3&gt;

&lt;p&gt;프로세스 생성 시 커널 스택만들어지는 자료구조 : Status / Pointer(addr)/ Identifier / PC / Priority 등을 저장한다.
  &lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995A6E395A5E0DAF18&quot; alt=&quot;PCB&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;/&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;연속 메모리 할당&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;가상화(swap)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;관리 테이블&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;단편화&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;고정 분할 방식&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;내부 단편화&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;가변 분할 방식&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;외부 단편화&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;페이징 기법&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;페이지테이블&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;페이지 내부 단편화&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;세그멘테이션 기법&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;세그먼테이션 테이블&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;세그멘테이션 외부 단편화&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Sun, 24 May 2020 21:15:44 +0900</pubDate>
        <link>http://lee95292.github.io/os/2020/05/24/os_mem_manage.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/os/2020/05/24/os_mem_manage.html</guid>
        
        
        <category>OS</category>
        
      </item>
    
      <item>
        <title>웹훅 (webhook)이 뭐야?, HTTP/2.0 Webpush 스펙 요약</title>
        <description>&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;오늘 소개할 주제는 &lt;strong&gt;webhook&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;p&gt;서비스를 배포하거나 관련 공부를 해보셨다면,&lt;br /&gt;
github과 Jenkins같은 CI도구를 연동하며 github에서 푸쉬를 비롯한 특정 이벤트를 jenkins로 전달해주기 위해 연동해본 경험이 있습니다.&lt;/p&gt;

&lt;p&gt;이때 github서버는 Jenkins가 별다른 요청을 하지 않아도 서버 내에서 특정 이벤트가 일어났을 때 Jenkins로 관련 정보들을 보내줍니다.&lt;br /&gt;
이것은 “웹훅”이라고 불리는 과정인데요, 일반적으로 클라이언트가 서버에게 정보 또는 행위를 요청하는 방식과는 다릅니다.&lt;/p&gt;

&lt;p&gt;오늘은 위에서 설명한 웹훅이 어떻게 가능한지 간단하게 공부하려합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;클라이언트에서 서버의 자원을 이용하기 위해, 또는 서버를 동작하기 위한 인터페이스로 Web API를 사용합니다.&lt;/p&gt;

&lt;p&gt;이와 반대로 &lt;strong&gt;역방향 API, 서버에서 발생하는 이벤트를 처리하기 위해 Webhook을 사용한다는 것을 알게되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 API를 통해 클라이언트의 요청을 처리하는 방식은 일상적인 방법이기에 무리없이 관련 동작을 이해하고 개발에 사용했지만,&lt;br /&gt;
 서버에서 발생하는 이벤트를 클라이언트로 전달하는 과정은 쉽사리 이해되지 않았습니다.&lt;br /&gt;
 또한 순수하게 이것이 어떤 원리로 가능한지 궁금하기도 했습니다.&lt;/p&gt;

&lt;h1 id=&quot;principle&quot;&gt;Principle&lt;/h1&gt;

&lt;p&gt;핵심적인 원리에 접근하는것은 어렵지 않았습니다.&lt;/p&gt;

&lt;p&gt;webhook은 언제부턴가 익숙한 개념이 되어있었고, RFC문서가 존재할것이라 생각해서 &lt;a href=&quot;https://tools.ietf.org/html/rfc8030&quot;&gt;rfc webhook&lt;/a&gt;으로 검색한 결과 HTTP/2.0 부터 지원하는 &lt;strong&gt;Web push&lt;/strong&gt;스펙을 확인할수 있었습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    +-------+           +--------------+       +-------------+
    |  UA   |           | Push Service |       | Application |
    +-------+           +--------------+       |   Server    |
        |                      |               +-------------+
        |      Subscribe       |                      |
        |---------------------&amp;gt;|                      |
        |       Monitor        |                      |
        |&amp;lt;&lt;span class=&quot;o&quot;&gt;====================&lt;/span&gt;&amp;gt;|                      |
        |                      |                      |
        |          Distribute Push Resource           |
        |--------------------------------------------&amp;gt;|
        |                      |                      |
        :                      :                      :
        |                      |     Push Message     |
        |    Push Message      |&amp;lt;---------------------|
        |&amp;lt;---------------------|                      |
        |                      |                      |

                      Figure 1: WebPush Architecture
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;RFC 8030에 소개된 overview에 소개된 webpush의 구조입니다. (UA: user agent)&lt;/p&gt;

&lt;p&gt;사실 이 그림을 보자마자 웹훅을 위한 Push service가 따로 존재하는구나! Push sevice가 메시지 브로커 역할을 하는군! 이라고 이해하시면 웹훅을 사용할때 큰 문제가 없습니다.&lt;/p&gt;

&lt;p&gt;발행/구독 구조에서 확인할 수 있는 push, monitor, message를 이해하신다면&lt;/p&gt;

&lt;p&gt;Subscriber : UA (user agent)&lt;br /&gt;
Publisher : Application Server&lt;br /&gt;
Broker : &lt;strong&gt;Push Service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;라고 생각하시면 됩니다.&lt;/p&gt;

&lt;p&gt;이는 아래와 같이 동작합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UA가 Application Server의 push service를 구독하고, push service를 모니터링합니다.&lt;/li&gt;
  &lt;li&gt;이후 Application Server에서 UA가 원하는 동작이 발생하고 trigger를 통해 이벤트 메서드를 호출합니다.&lt;/li&gt;
  &lt;li&gt;Application server는 발생한 Action에 대한 정보를 담은 메시지를 Push service에 전달하고,&lt;/li&gt;
  &lt;li&gt;Push service는 구독 정보를 참조해 관련있는 Subscripbers에게 메시지들을 전달합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://www.researchgate.net/profile/Ashwin_Makwana/publication/301350598/figure/fig1/AS:352171422961666@1460975618330/Publish-Subscribe-Model.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림: 발행/구독 모델&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;

&lt;p&gt;발행/구독구조의 특징과 함께 Webpush에 존재하는 몇가지 특징이 있습니다.&lt;/p&gt;

&lt;p&gt;User Agent(이하 UA)가 구독을 시작하며 Webpush 시나리오가 시작됩니다.&lt;br /&gt;
구독은 UA와 Push server, Application server간 연결을 뜻하며, HTTPS(port:443)위에서만 동작합니다.&lt;/p&gt;

&lt;p&gt;구독과 관련된 정보는 push service에 저장되며, 이 정보를 UA와 Application server가 각각 사용합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;실제 API 문서와 RFC의 overview에 소개된 내용을 위주로 특징들을 리스트해보았습니다.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;UA는 모든 incomming messages를 모니터링하기 위해 구독정보를 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Application server는 trigger가 발생한 Action 관련 정보들을 push service에게 던지는 과정을 위해 구독 정보를 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push API는 클라이언트와 서버 간 비동기적 통신을 지원합니다&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Push service는 UA가 비활성 상태이더라도 메시지를 전달하기 위해 활성상태가 될때까지 메시지를 저장합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;마찬가지로 Push service는 Application Server가 비활성 상태이더라도 저장된 Push message를 UA에게 전달합니다&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;(WebPush API의 이러한 특징과 Notification API를 이용해 Chrome에서는 알림 API를 지원합니다!)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UA와 Application server가 통신중일때도 push service는 동작합니다.&lt;br /&gt;
하지만 fetch, websocket등의 직접통신 API들에 비해 리소스가 많이 소요되고 지연현상이 많아 UA와 Application server가 활성연결 상태가 아닐 때 사용하는것을 권장하고 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ending&quot;&gt;Ending&lt;/h1&gt;

&lt;p&gt;W3C의 API 스펙과 RFC8030의 Overview탭을 위주로 작성했습니다.&lt;/p&gt;

&lt;p&gt;설명한 특징 이외에도 다양한 동작 시나리오 / 특징들이 있습니다.&lt;br /&gt;
아래 그림에서는 User Agent를 webpage와 service worker까지 추가해서 설명하고있습니다.&lt;/p&gt;

&lt;p&gt;저처럼 WebPush에 대한 호기심이 생기셨다면, 추가로 읽어보시는것도 추천드립니다..!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.w3.org/TR/push-api/sequence_diagram.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 Webpush API 메서드 동작 시나리오 (WC3)&amp;gt;&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@shlee1353/http1-1-vs-http2-0-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0-5727b7499b78&quot;&gt;http1,2 차이점&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8030&quot;&gt;RFC8030 Web push&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/push-api/#application-server&quot;&gt;W3C Webpush API spec&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 10 May 2020 21:06:14 +0900</pubDate>
        <link>http://lee95292.github.io/http/2020/05/10/principleOfwebhook.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/http/2020/05/10/principleOfwebhook.html</guid>
        
        
        <category>http</category>
        
      </item>
    
      <item>
        <title>[Continue]devlog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Devlog는 2020년 5월 3일부터 작성하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section&quot;&gt;목차&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#Junit-testfile-generator&quot;&gt;Junit-testfile-generator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Testfile-generator&quot;&gt;Testfile Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;junit-testfile-generator&quot;&gt;Junit-testfile-generator&lt;/h1&gt;

&lt;h3 id=&quot;vscode-archived&quot;&gt;[VSCode, Archived]&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lee95292/JunitTestGeneratorForVSCode&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduce&quot;&gt;Introduce&lt;/h3&gt;

&lt;p&gt;Java프로젝트 중 Junit을 사용해 테스트를 실행하는 유저를 위한 VSCode Extension.&lt;br /&gt;
테스트 경로에 테스트파일을 생성하도록 해주는 컨텍스트(우클릭) 메뉴 제공&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;일지&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2020.05.03&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개발을 종료하고 범용 버전으로 업그레이드하기 위해 &lt;a href=&quot;#Testfile-generator&quot;&gt;Testfile generator&lt;/a&gt;를 다시 시작하려한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;사후분석&lt;/h3&gt;

&lt;p&gt;그냥 내가 혼자 쓰려고 개발한 익스텐션 치고는 괜찮았다. 잘 쓰고 있었는데, 설치 수가 500명이 넘어가며 평가가 한두개씩 달리기 시작했고, 다른 사용자들까지 고려해야했다.&lt;/p&gt;

&lt;p&gt;한번 고치기 시작하니까 기존 설계를 뜯어고치고, JUnit뿐만 아니라 다른 테스트 프레임워크에서도 지원하고싶다는 욕심이 생겼다.&lt;/p&gt;

&lt;p&gt;표면적으로는 이름을 고치기 위해 extension을 새로 만들어야하고, 근본적으로는 목적부터가 다른 extension이므로 새로 만드는게 맞다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1000+ install&lt;/strong&gt;기록은 조금 아쉽지만, 새로 만드는 프로젝트에서 뛰어넘으면 된다고 생각하고 다시 시작하려한다.&lt;/p&gt;

&lt;h1 id=&quot;testfile-generator&quot;&gt;Testfile generator&lt;/h1&gt;

&lt;h3 id=&quot;vscode-continue&quot;&gt;#VSCode, #Continue&lt;/h3&gt;

&lt;h3 id=&quot;introduce-1&quot;&gt;Introduce&lt;/h3&gt;

&lt;p&gt;Junit, Jest, Mocha 등 테스트 프레임워크들에 대한 테스트파일 생성을 도와주는 VScode Extension&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;일지&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2020.05.03 설계 및 동기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;같은 vscode extension인 &lt;strong&gt;gitignore generator&lt;/strong&gt;를 보고 영감을 얻어 testfile generator를 시작하려 한다.&lt;br /&gt;
이 프로젝트는 &lt;a href=&quot;gitignore.io&quot;&gt;gitignore.io&lt;/a&gt; API를 사용해 gitignore파일을 제공한다. 물론 이 API는 다른 유저가 만들었다.&lt;/p&gt;

&lt;p&gt;나에겐 Test framework(jest,junit,mocha, etc..)의 통합 템플릿 파일을 제공하는 API는 없으므로, API 설계부터 새로 시작해야한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-url&quot;&gt;/api/[testframework]/[version]/[type]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;기본적으로는 위의 방식으로 호출 가능한 API를 만들고싶다 응답으로는 Testfile Template이고.&lt;/p&gt;

&lt;p&gt;예를 들어 내가 만든 서버의 URL이 teststub.io 라고 한다면, 아래와 같은 시나리오다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Request :
https://teststub.io/junit/default/default

Response

package TEST;
    import org.junit.Test;
    import org.junit.Before;

    public class TEST {

        @Before
        public void setup(){

        }

        @Test
        public void test() {
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;type에는 테스트파일의 형태를 나타내는 여러가지 값들이 들어갈 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;기본기능&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;커멘드를 통해서프레임워크와 버전이 같더라도 구분되는 템플릿을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컨텍스트 메뉴를 통해 버전과 프레임웤이 일치하는 기본 테스트 템플릿을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 04 May 2020 08:08:28 +0900</pubDate>
        <link>http://lee95292.github.io/2020/05/04/devlog.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/2020/05/04/devlog.html</guid>
        
        
      </item>
    
      <item>
        <title>[VSCode 확장앱] 개발 contribute 개념 소개</title>
        <description>&lt;h1 id=&quot;introduce&quot;&gt;Introduce&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://lee95292.github.io/boostcourse/2019/12/26/vscode-_extensionDevelopment.html&quot;&gt;VSCode 개발환경 구성&lt;/a&gt;이 완료된 상태라고 가정하고, 제가 사용했던 VSCode Extension API를 소개합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실제 사용 예시는 &lt;a href=&quot;https://github.com/microsoft/vscode-extension-samples/&quot;&gt;ms 공식 샘플들&lt;/a&gt;를 참고하시면 좋습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Extension을 개발한다는 이야기는 , &lt;strong&gt;contributes&lt;/strong&gt;를 통해 Command를 추가하거나 View를 개선 등등, 각각의 Context에 맞는 기능들을 개발한다는 이야기입니다.&lt;/p&gt;

&lt;p&gt;실제로 extension 설명 페이지에서 &lt;strong&gt;contributes&lt;/strong&gt; 라는 탭은 유저의 조작을 통해 실행할 수 있는 모든 포인트를 설명합니다.&lt;/p&gt;

&lt;h2 id=&quot;contribution-points&quot;&gt;contribution points?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;contribute는, VSCode UI 또는 컨텍스트에서 유저와 Extension 사이의 Interface역할을 합니다.&lt;/p&gt;

&lt;p&gt;즉, 개발자는 Extension을 개발하기 전에 &lt;a href=&quot;https://code.visualstudio.com/api/references/contribution-points#contributes&quot;&gt;모든 contributes&lt;/a&gt;를 참고하고 적절한 contribution API를 사용해 extension을 구현해야합니다.&lt;/p&gt;

&lt;h1 id=&quot;contribute-&quot;&gt;Contribute의 종류&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;User와 IDE 사이에 상호작용을 위한 많은 Contribution point가 있습니다. 자주 사용되는 내용들을 설명하도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;command&quot;&gt;command&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;vscode에서 명령 팔레트를 통해 실행하는 Command context입니다. 가장 많이 사용되는 contribute중 하나입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;유저가&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;vscode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;커멘드를&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;실행시키면&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;extension.commandTest에&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;바인딩된&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;메서드&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;실행&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;contributes&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extension.commandTest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello world!&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;menus&quot;&gt;menus&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;editor, file treeview,context menu 등에 바인딩되는 contribute입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래는 에디터에서 우클릭 시 나타나는 메뉴에 대한 contribute입니다.&lt;br /&gt;
확장자가 .java인 파일의 에디터에의 컨텍스트 메뉴에서 나타나며, 선택 시 extension.commandTest에 바인딩된 메서드가 실행됩니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;contributes&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;editor/context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extension.commandTest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;when&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resourceExtname==.java&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;configuration&quot;&gt;configuration&lt;/h2&gt;

&lt;h3 id=&quot;overview-vscode--workspace---contribute&quot;&gt;overview: vscode 또는 workspace의 설정에 해당하는 contribute입니다.&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;vscode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myExtension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위처럼 extension 에서 불러와 값을 사용할 수도 있으며, 마찬가지로 vscode API를 통해 setting도 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://code.visualstudio.com/assets/api/references/contribution-points/configuration.png&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://code.visualstudio.com/assets/api/references/contribution-points/settings-ui.png&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;유저는 configuration key를 통해 key에 해당하는 value를 editor, UI, json 등에서 설정을 편집할 수 있도록 해줍니다.&lt;/p&gt;

&lt;h3 id=&quot;practical--&quot;&gt;practical: 기본 세팅&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;contributes&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;configuration&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TypeScript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;typescript.useCodeSnippetsOnMethodSuggest&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Complete functions with their parameter signature.&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;typescript.tsdk&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Specifies the folder path containing the tsserver and lib*.d.ts files to use.&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;contribution &amp;gt; properties &amp;gt; [설정 KEY]&lt;/strong&gt;가 위치합니다.
    &lt;ul&gt;
      &lt;li&gt;위의 예시에서는 &lt;em&gt;typescript.useCodeSnippetsOnMethodSuggest&lt;/em&gt;, &lt;em&gt;typescript.tsdk&lt;/em&gt;가 KEY로 등록되었습니다.&lt;/li&gt;
      &lt;li&gt;.(dot)을 기준으로 계층을 이룹니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;설정의 메타정보는 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설정의 메타정보로 들어가는 필드
    &lt;ul&gt;
      &lt;li&gt;type: 설정 값의 타입: boolean, string, number, null 등 javascript 변수가 들어간다.&lt;/li&gt;
      &lt;li&gt;scope: workspace, folder, user, window 설정의 적용 범위&lt;/li&gt;
      &lt;li&gt;default: 설정의 기본값. type과 일치해야한다.&lt;/li&gt;
      &lt;li&gt;enum: dropdown처럼&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;language&quot;&gt;language&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;practical: 선언형 언어의 특징에 해당하는 아래 내용들을 컨트롤할 수 있는 API를 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(주로 특정 언어에서 사용되는 확장프로그램 개발 시 자주 사용됩니다)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Comment toggling&lt;/li&gt;
  &lt;li&gt;Brackets definition&lt;/li&gt;
  &lt;li&gt;Autoclosing&lt;/li&gt;
  &lt;li&gt;Autosurrounding&lt;/li&gt;
  &lt;li&gt;Folding&lt;/li&gt;
  &lt;li&gt;Word pattern&lt;/li&gt;
  &lt;li&gt;Indentation Rules&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;keybinding&quot;&gt;keybinding&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;단축키 관련 설정입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://code.visualstudio.com/assets/api/references/contribution-points/keybindings.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;closing&quot;&gt;Closing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자주 사용되는 contribute를 간단하게 설명했습니다. contribution point에 대한 자세한 설명과 사용법은 &lt;a href=&quot;https://code.visualstudio.com/api/references/contribution-points#contributes&quot;&gt;공식 페이지의 Contribution-point&lt;/a&gt;를 참고하시면 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;extension 개발을 위해 contribute와 바인딩되는 메서드들을 구현하기 위해서는 &lt;a href=&quot;https://code.visualstudio.com/api/references/vscode-api&quot;&gt;공식 페이지의 VScode-API&lt;/a&gt;를 참고해 개발하시면 됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;더 많은 contributes API를 사용해보고 설명 업데이트 하겠습니다 :)&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Apr 2020 17:33:22 +0900</pubDate>
        <link>http://lee95292.github.io/vscode/2020/04/25/vscode-_extension_devAPI_intro.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/vscode/2020/04/25/vscode-_extension_devAPI_intro.html</guid>
        
        
        <category>vscode</category>
        
      </item>
    
      <item>
        <title>[jenkins 403, no valid crumb] 에러 리포트</title>
        <description>&lt;p&gt;이번 포스팅에서는 젠킨스를 사용하며 만난 403에러의 원인과 해결과정을 풀어서 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git_jenkins_403/Inkedjenkinserror_LI.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“No valid crumb was included in the request”&lt;/p&gt;

&lt;p&gt;(만약 빠른 해결을 원하신다면, jenkins global security settings &amp;gt; csrf disable을 체크하면 됩니다.)&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;h3 id=&quot;csrf&quot;&gt;CSRF란?&lt;/h3&gt;

&lt;p&gt;사이트 간 요청 위조(또는 크로스 사이트 요청 위조, 영어: Cross-site request forgery, CSRF, XSRF)는 웹사이트 취약점 공격의 하나로, 사용자가 자신의 의지와는 무관하게 공격자가 의도한 행위(수정, 삭제, 등록 등)를 특정 웹사이트에 요청하게 하는 공격을 말합니다.&lt;br /&gt;
&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%9A%94%EC%B2%AD_%EC%9C%84%EC%A1%B0&quot;&gt;출처&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jenkins&quot;&gt;Jenkins란?&lt;/h3&gt;

&lt;p&gt;개발에 이은 지속적인 통합과 배포를 담당하는 도구입니다.&lt;br /&gt;
젠킨스는 Java언어 베이스로 만들어진 CI/CD 도구로, 1400개가 넘는 다양한 플러그인을 지원하기때문에 배포 시 테스트 자동화, 취약점 점검 등 서비스를 배포/운영하는 개발자 및 인프라 관련 업무에서 많은 편리함을 주는 도구입니다.&lt;/p&gt;

&lt;p&gt;비슷하게 지속적 통합을 제공하는 도구로는 travisCI,circleCI등이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git_jenkins_403/jenkins-workflow.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(jenkins-workflow, &lt;a href=&quot;http://oraclefusiontechnologies.blogspot.com/2014/04/continuous-integration-with-jenkins.html&quot;&gt;위키백과&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;오류 상황&lt;/h1&gt;

&lt;p&gt;소스코드의 업데이트를 확인하기 위해 Github의 Webhook이나 다른 연동 도구를 통해서 젠킨스와 연결해야합니다.&lt;br /&gt;
이 과정에서 아래와 같은 에러문구를 확인했고, 어떤 이유에서 github가 &lt;strong&gt;jenkins의 요청을 거부&lt;/strong&gt;했다는 것을 알 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git_jenkins_403/Inkedjenkinserror_LI.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;에러메시지 : No valid crumb was included in the request — 요청에 유효한 Crumb가 존재하지 않는다.&lt;/p&gt;

&lt;p&gt;에러메시지에는 crumb라는 특이한 단어가 등장합니다. 직역하면 빵부스러기, 구글에 검색해도 특별한 내용이 나오진 않습니다만, &lt;strong&gt;Jenkins crumb&lt;/strong&gt;라고 검색하니 jenkins의 보안관련 문서들이 보였습니다.&lt;/p&gt;

&lt;p style=&quot;font-size:1.2rem; font-weight:700;&quot;&gt;crumb란, Jenkins에서 github등 소스코드 리포지토리의 데이터를 가져올 때 요청의 주체가 자신임을 확인하도록 하는 IP+salt로 이루어진 쿠키입니다. &lt;/p&gt;

&lt;p&gt;즉, crumb를 요청헤더에 쿠키로 추가하므로써 CSRF 공격을 방지할 수 있는것이죠!&lt;/p&gt;

&lt;p&gt;반대로 Jenkins의 CSRF 보안 설정을 켜놓으면 &lt;strong&gt;어떤 문제&lt;/strong&gt;로 인해 crumb의 유효성이 사라졌을 때 403에러와 함께 일을 진행하지 못하는 사태가 발생합니다. 참고로 젠킨스는 2.0부터 CSRF protection이 기본 보안설정입니다.&lt;br /&gt;
(하지만 위에서도 말씀드렸듯, CSRF 보안 설정을 체크헤제하면 에러는 말끔히 사라집니다.)&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;문제 분석 및 해결&lt;/h1&gt;

&lt;p&gt;위에서 이야기한 &lt;strong&gt;어떤 문제&lt;/strong&gt;를 찾는건 시간이 꽤 걸렸습니다…&lt;br /&gt;
crumb에 대해 잘 모를 때 github의 설정문제라고 생각하고 자꾸 삽질을 했는데요,&lt;br /&gt;
has no valid crumb 에러가 발생하는 이유는 대부분 프록시 설정 문제입니다.&lt;/p&gt;

&lt;p&gt;crumb는 IP+salt의 조합이라고 설명했는데요, “has no valid crumb”라는 에러메시지를 통해 제가 Jenkins를 서비스하는 과정에서 요청 IP가 변경되는 과정이 있는지 생각해봐야합니다.&lt;br /&gt;
대부분 젠킨스 서버와 프록시가 있거나 캐싱 서버가 있어 IP주소가 변경되는 경우가 많습니다. 이때문에 Crumb가 유효성을 상실하게 됩니다.&lt;/p&gt;

&lt;p&gt;문제를 찾고 이부분을 어떻게 해결할까 하다가 Jenkins Crumb정책 관련한 소스코드를 보면서 답을 찾았습니다.&lt;/p&gt;

&lt;p&gt;Jenkins의 소스코드입니다.
&lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java&quot;&gt;Jenkins DefaultCrumbIssuer.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultCrumbIssuer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrumbIssuer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DataBoundConstructor&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultCrumbIssuer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excludeClientIPFromCrumb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;excludeClientIPFromCrumb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excludeClientIPFromCrumb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;initializeMessageDigest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;issueCrumb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isExcludeClientIPFromCrumb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getClientIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClientIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRemoteAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forwarded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_FORWARDED_FOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwarded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hopList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forwarded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hopList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hopList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;XFF란? X-forwarded-for의 약자로, 지금 상황처럼 프록시나 다른 중간 서버로 인해 IP가 변경될 때, Origin IP를 식별하는 표준 헤더입니다.
&lt;a href=&quot;https://ko.wikipedia.org/wiki/XFF&quot;&gt;위키백과&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;getClientIP메서드에서 XFF헤더가 있는 경우 hopList를 통해 중간에 거쳐갈 IP주소 리스트를 리턴하도록 작성되었습니다.&lt;/p&gt;

&lt;p&gt;즉, 젠킨스 설정을 통해 문제를 해결할 수 있는것이죠!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;excludeClientIPFromCrumb&lt;/strong&gt;변수는 위의 issueCrumb메서드에서 &lt;strong&gt;false일 때&lt;/strong&gt; getClientIp메서드를 통해 XFF헤더를 적용합니다.&lt;/p&gt;

&lt;p&gt;즉, DefaultCrumbIssuer의 생성자로 false를 지정하게 되면 XFF가 지정되고, 프록시로 인한 IP변조 문제가 해결되는것이죠.&lt;/p&gt;

&lt;p&gt;이제부터는 해결과정입니다.&lt;/p&gt;

&lt;p&gt;젠킨스 그루비 설정파일을 지정하기 위해 젠킨스 홈에서 설정파일 만들어줍니다.&lt;br /&gt;
(default: /var/lib/jenkins/init.goovy.d/myconf.groovy)&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hudson.security.csrf.DefaultCrumbIssuer&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jenkins.model.Jenkins&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 중단모드일 경우 시행하면 안됨&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isQuietingDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//CSRF 설정이 있는 경우&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCrumbIssuer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jenkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instance&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// DefaultCrumbIssuer(false) : XFF헤더 정의&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCrumbIssuer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultCrumbIssuer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'excludeClientIPfromCrumb set: false'&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nothing changed'&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이후 젠킨스를 재시작합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;service jenkins restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CSRF와 프록시 설정으로 인해 발생하는 403에러에 대한 해결과정이었습니다!&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Apr 2020 12:21:57 +0900</pubDate>
        <link>http://lee95292.github.io/jenkins/2020/04/12/jenkins403.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/jenkins/2020/04/12/jenkins403.html</guid>
        
        
        <category>jenkins</category>
        
      </item>
    
      <item>
        <title>자바스크립트를 공부하려하는 당신에게</title>
        <description>&lt;p&gt;저는 학교에서 Python, C/C++, Java를 다루는 수업을 수강하고, 문법을 익혔고,&lt;br /&gt;
Java와 C로는 여러 토이프로젝트를 해보면서 나름 프로그래밍 언어를 배우고 사용하는데 익숙해져 있어서 내심 프로그래밍 언어는 거기서 거기지~ 라는 생각을 해왔습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트를 배우면서 그 오만한 생각은 와장창 깨져버렸습니다…&lt;/p&gt;

&lt;p&gt;이 글에서는 제가 자바스크립트를 공부하며, 사용하며 어떤게 어려웠는지,&lt;br /&gt;
그럼에도 계속 자바스크립트를 공부하는 이유, 제가 생각하는 자바스크립트의 매력을 소개해보려 합니다!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reactjs&quot;&gt;사용한 라이브러리 :React.js&lt;/h2&gt;

&lt;p&gt;제일 처음으로 저는 웹 프론트 페이지를 만들기 위해 Reactjs 라이브러리를 공부했습니다.&lt;br /&gt;
이전까지 HTML/CSS/JQuery로 페이지를 구성했는데, 이때는 HTML문서에 Javascript를 끼워넣는 느낌이어서 코딩을 한다는 느낌이 들지는 않았고, 제대로된 페이지를 만들어 본 경험은 없었습니다.&lt;/p&gt;

&lt;p&gt;조금 더 제대로된 다이나믹한 웹 페이지를 만들기 위해 Jquery를 더 공부할까 고민했습니다.&lt;br /&gt;
그러던 도중 주변에서 React가 정말 쉽고 간편하다는 이야기를 듣고 React를 시작하게 되었습니다.&lt;/p&gt;

&lt;p&gt;결론부터 말씀드리자면,&lt;strong&gt;React는 간편하지만 절대 쉽지는 않습니다&lt;/strong&gt;.&lt;br /&gt;
위에서 말씀드렸듯, 저는 프로그래밍 언어 학습을 몇차례 학습하고, 각 언어들이 가지는 공통점과 차이점을 비교하면서 학습하는 것에 익숙해져 있었는데요, React에서 다루는 중점적인 개념은 여타 프로그래밍 언어와 상당히 차이가 있었습니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/jslib-intro/react-lifecycle.png&quot; /&gt;
&lt;span style=&quot;text-align:center&quot;&gt;그림: React 컴포넌트의 생명주기&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;대표적인 예시로,&lt;strong&gt;state와 property를 다루는 일, 컴포넌트의 생명주기, 모듈화, 컴포넌트, 훅&lt;/strong&gt; 등이 그것입니다.&lt;/p&gt;

&lt;p&gt;React에서는 컴포넌트의 렌더링이 Property와 State라고 불리는 리액트 컴포넌트의 특수 변수의 변경에 따라 일어나는데,&lt;br /&gt;
이런 개념을 멀리서 보면 객체지향의 상속과 비슷하다 생각할 수도 있지만 전혀 다른 개념이며, 이와 비슷하게 리액트가 사용하는 생소한 개념에 익숙해지는 것에 생각보다 시간이 많이 걸렸습니다…&lt;/p&gt;

&lt;p&gt;이렇듯, “쉽다”는것이 (최소한 저에게) 리액트의 장점이 아닙니다.&lt;br /&gt;
그럼에도 불구하고, 저는 이제 페이지를 구현할 때 React만을 사용합니다.&lt;br /&gt;
리액트는 컴포넌트를 재사용하기에 정말 편리합니다.&lt;br /&gt;
물론 HTML/CSS코드도 하면 재활용할 수 있지만 이는 말그대로 재활용이고, 상황에 맞게 코드를 수정해주어야 합니다.&lt;/p&gt;

&lt;p&gt;컴포넌트를 재사용한다는 것은, 기존 HTML/CSS/JS로 작성된 소스코드를 마치 &lt;strong&gt;함수 호출하듯 편리하게 사용&lt;/strong&gt;하는것을 의미합니다.&lt;br /&gt;
저에게는 이것이 React를 배우는 데 걸리는 어떤 어려움도 커버할 수 있을만한 큰 장점이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;프론트엔드 코드를 객체지향적으로 다루는 것 또한 저에게 장점으로 다가왔습니다.&lt;/p&gt;

&lt;h2 id=&quot;nodejs&quot;&gt;사용한 라이브러리 :Node.js&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;저는 여태 서버 프로그램을 작성하기 위해 Spring framework의 Spring boot를 사용했습니다.&lt;br /&gt;
스프링 부트를 사용하면서 딱히 불만이나 단점에 대해 생각해본 적이 없고, 오히려 SpringFramework는 국내에서 주도적으로 사용되는 만큼 문서가 풍부하고 한국 내 커뮤니티도 활발해 버그를 해결하는 것이 어렵지 않았습니다.&lt;/p&gt;

&lt;p&gt;그러던 어느날 저는 어떤 계기로 Nodejs의 express 라이브러리를 이용해 서버 프로그램을 작성해보았고, 스프링을 사용할때와 상당히 다른 느낌을 받았습니다.&lt;br /&gt;
짧은 기간 사용했지만, 그 느낌을 공유해볼까 합니다.&lt;/p&gt;

&lt;p&gt;스프링같은 경우, 엔터프라이즈급 서버 프로그램을 위한 &lt;strong&gt;“프레임워크”&lt;/strong&gt;이기 때문에,&lt;br /&gt;
시작부터 어떤 틀 위에서 시작하고, 여러가지 설정을 거쳐 프로젝트를 시작합니다. 누군가는 이 과정이 너무 복잡하고 쓸데없다고 말하지만, 저는 절대 그렇게 생각하지 않습니다.&lt;br /&gt;
프로젝트를 시작함과 동시에 많은 부분을 프레임워크로부터 보장받는 것이기에, 프레임워크를 사용하는것과 Node같은 라이브러리 패키지를 사용하는 것과의 장단점을 비교하는 것은 의미가 없다고 생각합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Springboot: 46.1k stars, 662contributers&lt;br /&gt;
nodejs : 68.3k stars, 2657contributers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다만 Node.js 런타임 뿐만 아니라 Javascript 라이브러리 전반적으로 커뮤니티 활성화 정도가 매우 높다고 느꼈습니다.&lt;br /&gt;
위는 Nodejs와 Spring project의 컨트리뷰터 수입니다. 물론 Node는 Spring과 비교될 격이 아니고, OpenJRE나 OpenJDK와 비교해야 옳지만, jre,jdk는 상용 버전인 oracle의 비중이 더 높기에 최대한 커뮤니티 활정정도를 비교할만한 지표로 생각했습니다.&lt;/p&gt;

&lt;p&gt;커뮤니티 활성 정도를 보며 한편으론 다른 재단이나 커뮤니티에 비해 유저들이 참여해 생성해낸 프로젝트가 큰 영향력을 갖는 것이 신기했습니다.&lt;/p&gt;

&lt;p&gt;Spring같은 경우 pivotal이라는 회사에서 spring 관련 프로젝트를 시작하고 키워나가는 방식입니다. 어찌보면 pivotal이 시작한 프로젝트가 무조건 메인 프로젝트이므로 유저에게 선택권이 줄어들 수 있다고 생각할 수 있습니다.&lt;br /&gt;
(스프링은 스프링 자체의 설계 방식이 있기에 어쩔 수 없습니다. 저는 잘 모르지만 이 방식이 같는 장점 또한 있을 것입니다.)&lt;/p&gt;

&lt;p&gt;반면 Nodejs의 경우 인증이라는 커다란 부분을 담당하는 패키지 Passport.js는 개인이 설립한 프로젝트임에도 유저들에게 그 편리성과 효용성을 입증받아 가장 많이 사용되는 패키지로 선택되었습니다. 이런 적자생존 방식으로 생태계가 유지되는 것이 매우 어렵지만, 그만큼 유저에게 많은 편리함을 주고있다고 생각했습니다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;마무리&lt;/h3&gt;

&lt;p&gt;나름 장단점을 설명한다고 글을 썼지만, 너무 장점 위주로 설명한 것 같습니다…&lt;br /&gt;
생태계가 활발하고 자주 변화한다고 좋은 것만은 아니라고 생각합니다. 유저는 변화한 내용을 계속 학습하는 것에 비용이 많이 발생할 수도 있고, 새로운 보안 취약점이 발생하거나 기반 패키지가 업데이트 된 경우 상위 패키지와 호환성이 떨어질 수도 있습니다.&lt;/p&gt;

&lt;p&gt;마지막 부분, nodejs의 특징을 조금 더 잘 설명하기 위해 제가 경험한 Spring framework와 비교하며 작성했지만, 위에 말씀드렸 듯 모든것에는 장단점이 있으니, 프로젝트에 사용할 기술스택을 잘 선택하셨으면 합니다!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Mar 2020 09:53:54 +0900</pubDate>
        <link>http://lee95292.github.io/web/2020/03/15/jslibrary-introduce.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/web/2020/03/15/jslibrary-introduce.html</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>글또 4기 시작, 다짐글</title>
        <description>&lt;p&gt;글또 4기 다짐글 : 근거있는 변화와 계획!&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;글또를 하게 된 계기&lt;/h1&gt;

&lt;p&gt;나는 아래의 목적을 가지고 글을 썼지만, 글을 쓰는것에 대한 동기부여가 희미해졌다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;버그리포트를 열심히 써서 나중에 똑같은 에러가 터졌을때 참고하자 » 검색해서 보는게 빠르고 정확했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자기PR: 나의 꾸준함을 글쓰기로 보여주자 » 나는 별로 꾸준하지도 성실하지도 않았다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공부하자: 글을 쓰면서 지식을 내면화하고 정리하자. » 이게 그나마 글을 쓸만한 동기였다.&lt;/p&gt;

    &lt;p&gt;(글을 쓰는 과정에서 내가 알고있다고 생각한 지식에 의문을 품었고, 질문에 대한 답을 찾아나가면서 많이 배웠다.)&lt;/p&gt;

    &lt;p&gt;하지만 공부하려고 글을 쓰는것은 초중고 12년 공부습관에 반하는 행동이었고, 내 생각을 읽기 쉽게 정리하는것도 생각보다 너무 힘들었다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;여전히 글쓰는것은 힘들고 귀찮지만, 생각과 상황이 조금 바뀌었다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;우선 개발자 글쓰기모임 글또라는 활동을 알게되었다.&lt;/p&gt;

    &lt;p&gt;글쓰는 또라이가 세상을 바꾼다. 이름이 멋있기도 했고, 개발자분들이 &lt;strong&gt;글쓰고 피드백, 커뮤니케이션&lt;/strong&gt;하는 모습이 너무 부럽고 빛났다.&lt;br /&gt;
(예치금을 두고 글을 쓴다는 약간의 강제성을 얻기 위해 지원하기도 했다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;글을 쓰는것이 힘든것이 아니라는것을 깨달았다.&lt;/p&gt;

    &lt;p&gt;글을 쓰는 것 자체로도 어렵지만, 글을 쓰기 위해 지식을 정리하고,확장하고, 내가 가진 질문에 대한 답을 채우는 것을 힘들어했고, 그것이 글쓰기를 멀리하게 된 이유였다.&lt;/p&gt;

    &lt;p&gt;필요한 지식만 검색해서 얻고 땡. 이게 왜 이렇게 되는지는 시간있을때만 찾아보고 아니면 애써 무시했었다.
얻은 지식을 정리하고 확장하는 일을 게을리 하면 그것은 지식의 파편으로 남아서 곧 죽은 지식이 된다.&lt;/p&gt;

    &lt;p&gt;이제는 내가 글쓰기에서 어떤 과정을 힘들어했는지 알게됐고, 극복해보려고 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;그래서 이제 어떤 글을 쓸까?&lt;/h2&gt;

&lt;p&gt;나는 개발/인프라 분야에서 흥미 분야가 광범위한 편이다.&lt;br /&gt;
(지식영역이 넓은건 아닌데, 뭔가를 알게되면 다 재미있어보이고 한번쯤 해보고싶다.)&lt;/p&gt;

&lt;p&gt;그래서 지금 쓰고싶은 글을 나열하고, 나중에 골라서 쓰면 어떨까 싶다.&lt;/p&gt;

&lt;p&gt;다루고싶은 내용&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;로버트 C 마틴 - Clean Architecture&lt;br /&gt;
Clean code를 너무 인상깊게 봐서 아키텍쳐편도 샀다. 아마 2~4주차 사이에 독후감으로 쓸 것 같다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정보처리기사 - 운영체제파트&lt;br /&gt;
나는 운영체제 연구실에서 운영체제와 많이 무관한 가상화파트를 다룬다.
하지만 면접만 보면 운영체제에 대한 질문이 빠지지 않고 나오기에 정리해야할 필요성을 느꼈다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;관심은 있지만 사용경험이 적은 오픈소스 소프트웨어들&lt;br /&gt;
ElasticSearch, openstack, Kafka, Zepplin - 컨트리뷰션을 목표로 공부하고 분석하고 사용해보고싶다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 이전에도 포스팅 스택은 항상 차있었지만, 글을 쓰기 전에 흥미가 다른곳으로 돌아간 경우가 많다.&lt;/p&gt;

&lt;p&gt;하지만! 이번엔 능동적인 글쓰기를 목표로, (다루고싶은 내용)에 적힌 글을 쓸 것이다.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Feb 2020 19:14:43 +0900</pubDate>
        <link>http://lee95292.github.io/etc/2020/02/29/geultto_start.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/etc/2020/02/29/geultto_start.html</guid>
        
        
        <category>etc</category>
        
      </item>
    
      <item>
        <title>[Continue,Intg] 개념이 잘 정리된 링크| 테크블로그| 공식 Document 모음</title>
        <description>&lt;p&gt;Spring boot - cloud - database - frontend - devops -security&lt;/p&gt;

&lt;p&gt;웹 서비스를 위한 폭넓은 개발스택을 갖추길 희망합니다.&lt;/p&gt;

&lt;p&gt;저만을 위한 링크북 인덱스이고, 제가 이해한 글들을 모아놓았지만, 비슷한 목표를 가진분들이 참고하시면 좋을것 같습니다.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;개념이 잘 정리된 링크&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;시스템 OS/Linux/Windows/JVM&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://wiki.kldp.org/HOWTO/html/Adv-Bash-Scr-HOWTO/&quot;&gt;고급 쉘 스크립트 사전&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.lael.be/post/73&quot;&gt;우분투 서버세팅(운영환경 관련 bash명령어)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.holaxprogramming.com/2017/10/09/java-jvm-performance/&quot;&gt;JVM 메모리 관리구조&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://yaboong.github.io/java/2018/05/26/java-memory-management/&quot;&gt;JVM Stacc, Heap 할당방법&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.naver.com/PostView.nhn?blogId=tipsware&amp;amp;logNo=221359282016&amp;amp;parentCategoryNo=&amp;amp;categoryNo=83&amp;amp;viewDate=&amp;amp;isShowPopularPosts=true&amp;amp;from=search&quot;&gt;DLL 개념과 사용&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인프라&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/6070967&quot;&gt;네이버 분산처리(**꼭 정독해보자~)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;웹&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Front
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://velog.io/@jeff0720/React-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-Webpack-%EA%B8%B0%EC%B4%88#%EC%9B%B9%ED%8C%A9%EC%9C%BC%EB%A1%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%8C%8C%EC%9D%BC-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0&quot;&gt;Webpack - React 설정&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://webclub.tistory.com/628&quot;&gt;css flex(긴글)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.naver.com/yoon980208/221478151850&quot;&gt;css flex(짧은글)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Back
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1160&quot;&gt;JWT 개념&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://all-record.tistory.com/186&quot;&gt;우분투환경에서 단순 배포하기_W&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Spring
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/167&quot;&gt;Spring bean 생성과정&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라우드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098&quot;&gt;VPC(Virtual Private Clout)개념, 클라우드 네트워크 헷갈릴 때 보기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git &amp;amp; github&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0&quot;&gt;git reset(add,commit 리셋)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;알고리즘&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/blog/view/9&quot;&gt;세드먼트 트리&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기타&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://heropy.blog/2017/09/30/markdown/&quot;&gt;Markdown 문법&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;document&quot;&gt;공식 Document&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/&quot;&gt;Java8 API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kgmyh.github.io/blog/2017/12/02/spring-boot-chapter01/&quot;&gt;spring boot(한글)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;2&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/&quot;&gt;Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;도커&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/ko/docs/home/&quot;&gt;k8s(한글)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com&quot;&gt;Android&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/&quot;&gt;node&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;기업| 개인 기술블로그&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;사실 &lt;a href=&quot;https://medium.com/@Dongmin_Jang/%EC%97%85%EC%B2%B4%EB%B3%84-%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8-e2d736d0e658&quot;&gt;테크블로그는 여기&lt;/a&gt;에 다 정리되어있다. 내가 자주보는 한글 블로그 위주로 모았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/home&quot;&gt;네이버 D2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tech.kakao.com/&quot;&gt;카카오 기술블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/coupang-tech&quot;&gt;쿠팡 기술블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xguru.net/&quot;&gt;구루(권정혁님) 기술블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 27 Jan 2020 14:46:00 +0900</pubDate>
        <link>http://lee95292.github.io/intg/2020/01/27/INTG_TheoryLink-TheoryLink.html</link>
        <guid isPermaLink="true">http://lee95292.github.io/intg/2020/01/27/INTG_TheoryLink-TheoryLink.html</guid>
        
        
        <category>intg</category>
        
      </item>
    
  </channel>
</rss>
